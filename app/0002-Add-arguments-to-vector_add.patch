From d388709a5deadb86d7c3fc5f16c5c7bc4d8ed772 Mon Sep 17 00:00:00 2001
From: Anastassios Nanos <ananos@nubificus.co.uk>
Date: Thu, 8 Apr 2021 21:19:22 +0100
Subject: [PATCH 2/3] Add arguments to vector_add

Signed-off-by: Anastassios Nanos <ananos@nubificus.co.uk>
---
 vector_add/vector_add.cpp | 25 ++++++++++++-------------
 1 file changed, 12 insertions(+), 13 deletions(-)

diff --git a/vector_add/vector_add.cpp b/vector_add/vector_add.cpp
index f5ab3e0..a73e358 100755
--- a/vector_add/vector_add.cpp
+++ b/vector_add/vector_add.cpp
@@ -18,9 +18,9 @@
 #include <iostream>
 
 //int main(){
-extern "C" int vector_add(){
+//extern "C" int vector_add(){
+extern "C" int vector_add (int* A, int* B, int* C, int dimension){
 	try{
-
 		//get all platforms (drivers)
 		std::vector<cl::Platform> all_platforms;
 		cl::Platform::get(&all_platforms);
@@ -63,34 +63,33 @@ extern "C" int vector_add(){
 		}
 
 		// create buffers on the device
-		cl::Buffer buffer_A(context, CL_MEM_READ_WRITE, sizeof(int) * 10);
-		cl::Buffer buffer_B(context, CL_MEM_READ_WRITE, sizeof(int) * 10);
-		cl::Buffer buffer_C(context, CL_MEM_READ_WRITE, sizeof(int) * 10);
+		cl::Buffer buffer_A(context, CL_MEM_READ_WRITE, sizeof(int) * dimension);
+		cl::Buffer buffer_B(context, CL_MEM_READ_WRITE, sizeof(int) * dimension);
+		cl::Buffer buffer_C(context, CL_MEM_READ_WRITE, sizeof(int) * dimension);
 
-		int A[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
-		int B[] = { 0, 1, 2, 0, 1, 2, 0, 1, 2, 0 };
 
 		//create queue to which we will push commands for 	the device.
 		cl::CommandQueue queue(context, default_device);
 
 		//write arrays A and B to the device
-		queue.enqueueWriteBuffer(buffer_A, CL_TRUE, 0, sizeof(int) * 10, A);
-		queue.enqueueWriteBuffer(buffer_B, CL_TRUE, 0, sizeof(int) * 10, B);
+		queue.enqueueWriteBuffer(buffer_A, CL_TRUE, 0, sizeof(int) * dimension, A);
+		queue.enqueueWriteBuffer(buffer_B, CL_TRUE, 0, sizeof(int) * dimension, B);
 
 		cl::Kernel kernel(program, "simple_add");
 
 		kernel.setArg(0, buffer_A);
 		kernel.setArg(1, buffer_B);
 		kernel.setArg(2, buffer_C);
-		queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(10), cl::NullRange);
+		queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(dimension), cl::NullRange);
 
-		int C[10];
+		//int C[dimension];
 		//read result C from the device to array C
-		queue.enqueueReadBuffer(buffer_C, CL_TRUE, 0, sizeof(int) * 10, C);
+		queue.enqueueReadBuffer(buffer_C, CL_TRUE, 0, sizeof(int) * dimension, C);
 		queue.finish();
 
+		//printf("address: %#llx\n", (unsigned long)C);
 		std::cout << " result: \n";
-		for (int i = 0; i < 10; i++){
+		for (int i = 0; i < dimension; i++){
 			std::cout << C[i] << " ";
 		}
 		std::cout << std::endl;
-- 
2.25.1

